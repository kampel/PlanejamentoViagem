// <auto-generated />
using App.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PlanejamentoViagem.Classes;
using System;

namespace App.Data.Migrations
{
    [DbContext(typeof(PlanejamentoViagemContext))]
    partial class PlanejamentoViagemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PlanejamentoViagem.Classes.Endereco", b =>
                {
                    b.Property<int>("IdEndereco")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro");

                    b.Property<string>("Cidade");

                    b.Property<string>("CodigoPostal");

                    b.Property<string>("Complemento");

                    b.Property<string>("Estado");

                    b.Property<string>("Logradouro");

                    b.Property<string>("Pais");

                    b.HasKey("IdEndereco");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("PlanejamentoViagem.Classes.LocalInteresse", b =>
                {
                    b.Property<int>("IdLocalInteresse")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("Email");

                    b.Property<int>("IdEndereco");

                    b.Property<string>("Nome");

                    b.Property<string>("Telefone");

                    b.Property<int>("TipoLocalInteresse");

                    b.HasKey("IdLocalInteresse");

                    b.HasIndex("IdEndereco")
                        .IsUnique();

                    b.ToTable("LocalInteresse");
                });

            modelBuilder.Entity("PlanejamentoViagem.Classes.Roteiro", b =>
                {
                    b.Property<int>("IdRoteiro")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataFinal");

                    b.Property<DateTime>("DataInicial");

                    b.Property<int>("IdViajante");

                    b.Property<string>("Nome");

                    b.HasKey("IdRoteiro");

                    b.HasIndex("IdViajante");

                    b.ToTable("Roteiro");
                });

            modelBuilder.Entity("PlanejamentoViagem.Classes.RoteiroLocalInteresse", b =>
                {
                    b.Property<int>("IdRoteiro");

                    b.Property<int>("IdLocalInteresse");

                    b.HasKey("IdRoteiro", "IdLocalInteresse");

                    b.HasIndex("IdLocalInteresse");

                    b.ToTable("RoteiroLocalInteresse");
                });

            modelBuilder.Entity("PlanejamentoViagem.Classes.Viajante", b =>
                {
                    b.Property<int>("IdViajante")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<int>("IdEndereco");

                    b.Property<string>("Nome");

                    b.Property<string>("Telefone");

                    b.HasKey("IdViajante");

                    b.HasIndex("IdEndereco")
                        .IsUnique();

                    b.ToTable("Viajante");
                });

            modelBuilder.Entity("PlanejamentoViagem.Classes.LocalInteresse", b =>
                {
                    b.HasOne("PlanejamentoViagem.Classes.Endereco", "Endereco")
                        .WithOne("LocalInteresse")
                        .HasForeignKey("PlanejamentoViagem.Classes.LocalInteresse", "IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PlanejamentoViagem.Classes.Roteiro", b =>
                {
                    b.HasOne("PlanejamentoViagem.Classes.Viajante", "Viajante")
                        .WithMany("Roteiros")
                        .HasForeignKey("IdViajante")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PlanejamentoViagem.Classes.RoteiroLocalInteresse", b =>
                {
                    b.HasOne("PlanejamentoViagem.Classes.LocalInteresse", "LocalInteresse")
                        .WithMany("Roteiros")
                        .HasForeignKey("IdLocalInteresse")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlanejamentoViagem.Classes.Roteiro", "Roteiro")
                        .WithMany("Locais")
                        .HasForeignKey("IdRoteiro")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PlanejamentoViagem.Classes.Viajante", b =>
                {
                    b.HasOne("PlanejamentoViagem.Classes.Endereco", "Endereco")
                        .WithOne("Viajante")
                        .HasForeignKey("PlanejamentoViagem.Classes.Viajante", "IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
